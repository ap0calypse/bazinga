#!/usr/bin/perl
use strict;
use warnings;
use CGI qw/:standard/;
use Data::Dumper;
use Storable;
use Env qw(HOME USERNAME);
use v5.10;

# project:      bazinga
# description:  free special blogging tool, inspired by nanoblogger
# author:       Manuel Fill (ap0calypse@agitatio.org)
# license:      


# version info, config locations, ...
my $VERSION = "0.1a";
my $CONFIG = "$HOME/.bazinga/bazinga.conf";
my $CSS = "$HOME/.bazinga/style.css";
my %CONF_HASH;
my $BZG_FILE = "$HOME/.bazinga/bazinga.dat";
my $BZG_HASH;
if ((stat $BZG_FILE)[7] > 20) {
    $BZG_HASH = retrieve $BZG_FILE;
}



open my $CONFFD, "< $CONFIG" or die "can't access config, please check $CONFIG\n";
while (<$CONFFD>) {
    next if m/^#.*/;
    next if m/^[[:space:]]+$/;
    if (m/.*BLOG_DIRECTORY: *\"(.+)\".*/) {
        $CONF_HASH{'blog_directory'} = $1;
        mkdir $CONF_HASH{'blog_directory'} unless -e $CONF_HASH{'blog_directory'};
        mkdir "$CONF_HASH{'blog_directory'}/pages" unless -e "$CONF_HASH{'blog_directory'}/pages";
        mkdir "$CONF_HASH{'blog_directory'}/articles" unless -e "$CONF_HASH{'blog_directory'}/articles";
        mkdir "$CONF_HASH{'blog_directory'}/comments" unless -e "$CONF_HASH{'blog_directory'}/comments";
    }
    else {
        print "Obviously, you didn't specify a BLOG_DIRECTORY in your $CONFIG\n";
        exit 11;
    }
}
close $CONFFD;


# param check, we die if there is the wrong count
die "not enough parameters given, try 'bzg help' for a quick overview.\n" if scalar @ARGV < 1;
die "configuration file $CONFIG doesn't exist or isn't readable, please check.\n" unless (-e $CONFIG);
print "you have no custom $CSS, that's ok if you want standard layout.\n" unless (-e $CSS);

# arg-list processing
if ($ARGV[0]) {
    if ($ARGV[0] eq "help") {
        print_usage() and exit 0;
    }
    elsif ($ARGV[0] eq "add") {
        if ($ARGV[1]) {
            if (-e $ARGV[1]) {
                print "parsing file $ARGV[1] ... ";
                add_content($ARGV[1]);
                print "DONE!\n";
            }
            else {
                print "$ARGV[1] is not a file, please specify a path to a valid content file.\n"; 
            }
        }
        else {
            print "You have to specify the path to a valid content file.\n";
            exit 2;
        }
    }
    elsif ($ARGV[0] eq "delete") {
        if ($ARGV[1]) {
            if ($ARGV[1] =~ m/[[:alnum:]]{16}/) {
                print "deleting content $ARGV[1] from structure ... ";
                delete_content($ARGV[1]);
                print " DONE!\n";
            }
            else { 
                print "$ARGV[1] is not a valid id, please specify a correct id.\n"; 
            }
        }
        else {
            print "You have to specify a valid content id.\n";
            exit 3;
        }
    }
    elsif ($ARGV[0] eq "replace") {
        if ($ARGV[1]) {
            if ($ARGV[1] =~ m/[[:alnum:]]{16}/) {
                if ($ARGV[2]) {
                    if (-e $ARGV[2]) {
                        print "replacing content $ARGV[1] with $ARGV[2] ... ";
#                        check_article($ARGV[1]);
                        print " DONE!\n";
                    }
                    else { 
                        print "$ARGV[1] is not a file, please specify a path to the content file.\n";
                    }
                }
                else {
                    print "You have to specify a valid content file\n";
                    exit 4;
                }
            }
            else { 
                print "$ARGV[1] is not a valid id, please specify a correct id.\n"; 
            }
        }
        else {
            print "You have to specify the id you want to be replaced.\n";
            exit 5;
        }
    }
    elsif ($ARGV[0] eq "check") {
        if ($ARGV[1]) {
            if (-e $ARGV[1]) {
                print "checking article file $ARGV[1] for correctness ... ";
#                check_article($ARGV[1]);
                print "DONE!\n";
            }
            else { 
                print "$ARGV[1] is not a file, please specify a path to the article or comment file.\n"; 
            }
        }
        else {
            print "You have to specify the path to the content file which should be checked.\n";
            exit 6;
        }
    }
    elsif ($ARGV[0] eq "update") {
        if ($ARGV[1]) {
            if ($ARGV[1] eq "LOCAL") {
                print "updating local bazinga structure ... ";
                update_bazinga($ARGV[1]);
                print "DONE!\n";
            }
            elsif ($ARGV[1] eq "REMOTE") {
                print "updating remote bazinga structure ... ";
#                update_bazinga($ARGV[1]);
                print "DONE!\n";
            }
            else { 
                print "$ARGV[1] is not a valid identifier. Needs to be LOCAL or REMOTE.\n"; 
            }
        }
        else {
            print "You have to specify the structure that should be updated.\n";
            exit 7;
        }
    }
    else { 
        print "You entered an unknown parameter, please check.\n"; 
    }
}





# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# function: print_usage
# needs:    nothing
# returns:  nothing
# calls:    nothing
# purpose:  displays short usage information
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

sub print_usage {
    print qq(
    bazinga $VERSION

    quick overview:
    
        bzg help
        bzg add FILE
        bzg delete ID
        bzg replace ID FILE
        bzg check FILE
        bzg update 

    examples:

        bzg add my_fancy_new_article.txt
        bzg add about_me_page.txt
        bzg add comment_from_some_dude.txt
        bzg replace 6783423 corrected_article.txt
        bzg check maybe_corrupt_article.txt
        bzg update

);
}





# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# function: add_content
# needs:    path to content file
# returns:  nothing
# calls:    nothing
# purpose:  processes the content file and fills the super hash with the content information
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

sub add_content {
    my $content_file = shift;
    my $type;
    my $random = join ("", ('a' .. 'f', 0 .. 9)[map {rand (16)} (1 .. 16)] );
    open my $CONTFD ,"< $content_file" or die "File could not be opened, please check permissions.\n";
    while (<$CONTFD>) {
        $BZG_HASH->{$1}{$random} = {} and $type = $1 and next if m/^type: *\"(article|comment|page){1}\".*$/;
        $BZG_HASH->{$type}{$random}{$1} = $2 and next if m/^(.+): *\"(.+)\".*$/;
        if (/START_TEXT/ .. /END_TEXT/) {
            $BZG_HASH->{$type}{$random}{'text'} .= $_ if $_ !~ /.*(END_TEXT|START_TEXT){1}.*/ ;
        }
    }
    close $CONTFD;
    store $BZG_HASH, $BZG_FILE;
    print Dumper($BZG_HASH);
}





# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# function: delete content
# needs:    valid id from a page / article / comment
# returns:  nothing
# calls:    nothing
# purpose:  deletes any content and the corresponding id from the index
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

sub delete_content {
    my $id = shift;
    my ($temp, $type);
    open my $INDEXFD, "< $CONF_HASH{'blog_directory'}/index" or die "$!";
    while (<$INDEXFD>) {
        if (s/^$id\:(.+?)\:.+$//gmx) {
            chomp;
            $type = $1;
        }
        $temp .= $_;
    }
    
    unlink "$CONF_HASH{'blog_directory'}/articles/$id.html" if $type eq "article";
    unlink "$CONF_HASH{'blog_directory'}/pages/$id.html" if $type eq "page";
    unlink "$CONF_HASH{'blog_directory'}/comments/$id.html" if $type eq "comment";
    close $INDEXFD;
    open my $INDEXWR, "> $CONF_HASH{'blog_directory'}/index" or die "$!";
    print $INDEXWR $temp;
    close $INDEXWR;
    
}





sub replace_content {}
sub check_content {}





# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# function: update_bazinga
# needs:    string "LOCAL" or "REMOTE"
# returns:  nothing
# calls:    nothing
# purpose:  this is where it gets tricky .. we have to bring everything together now .. pheew
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

sub update_bazinga {
    my $location = shift;
    my %index_hash;
    if ($location eq "LOCAL") {
        open my $INDEXFD, "< $CONF_HASH{'blog_directory'}/index" or die "Couldn't open index file, exiting.\n";
        while (<$INDEXFD>) {
            if (m/^(.+?)\:(.+?)\:(.+?)\:(.+?)\:(.+?).*$/) {
                $index_hash{$5}->{'title'} = $4;
                $index_hash{$5}->{'datetime'} = $5;
                $index_hash{$5}->{'tags'} = $3;
                $index_hash{$5}->{'id'} = $1;
            }
        }
        close $INDEXFD;
        for (sort keys %index_hash) {
            print $index_hash{$_}->{'title'}, "\n";
        }
    }
    print Dumper(%index_hash);
}
