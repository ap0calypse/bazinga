#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;
use Env qw(HOME USERNAME);
use v5.10;

# project:      bazinga
# description:  free special blogging tool, inspired by nanoblogger
# author:       Manuel Fill (ap0calypse@agitatio.org)
# license:      

my $VERSION = "0.1a";
my $CONFIG = "$HOME/.bazinga/bazinga.conf";

die "not enough parameters given, try 'bzg help' for a quick overview.\n" if scalar @ARGV < 1;
die "configuration file $CONFIG doesn't exist or isn't readable, please check.\n" unless (-e $CONFIG);

sub print_usage {
    print qq(
    bazinga $VERSION

    quick overview:
    
        bzg help
        bzg add FILE
        bzg delete ID
        bzg replace ID FILE
        bzg check FILE
        bzg update LOCAL | REMOTE

    examples:

        bzg add my_fancy_new_article.txt
        bzg add comment_from_some_dude.txt
        bzg replace 6783423 corrected_article.txt
        bzg check maybe_corrupt_article.txt
        bzg update LOCAL
        bzg update REMOTE

);
}

given ($ARGV[0]) {
    when (/help?/) {
        print_usage and exit 0;
    }
    when (/add?/) {
        given ($ARGV[1]) {
            when (-e $ARGV[1]) {
                print "parsing file $ARGV[1] ... ";
                add_article($ARGV[1]);
                print "DONE!\n";
            }
            default { print "$ARGV[1] is not a file, please specify a path to the article or comment file.\n"; }
        }
    }
    when (/delete?/) {
        given ($ARGV[1]) {
            when ($ARGV[1] =~ m/[[:alnum:]]{16}/) {
                print "deleting article $ARGV[1] from articles ... ";
#                delete_article($ARGV[1]);
                print " DONE!\n";
            }
            default { print "$ARGV[1] is not a valid id, please specify a correct id.\n"; }
        }
    }
    when (/replace?/) {
        given ($ARGV[1]) {
            when ($ARGV[1] =~ m/[[:alnum:]]{16}/) {
                given ($ARGV[2]) {
                    when (-e $ARGV[2]) {
                        print "replacing article $ARGV[1] with $ARGV[2] ... ";
#                        check_article($ARGV[1]);
                        print " DONE!\n";
                    }
                    default { print "$ARGV[1] is not a file, please specify a path to the article file.\n"; }
                }
            }
            default { print "$ARGV[1] is not a valid id, please specify a correct id.\n"; }
        }
    }
    when (/check?/) {
        given ($ARGV[1]) {
            when (-e $ARGV[1]) {
                print "checking article file $ARGV[1] for correctness ... ";
#                check_article($ARGV[1]);
                print "DONE!\n";
            }
            default { print "$ARGV[1] is not a file, please specify a path to the article or comment file.\n"; }
        }
    }
    when (/update?/) {
        given ($ARGV[1]) {
            when (/LOCAL?/) {
                print "updating local bazinga structure ... ";
#                update_bazinga($ARGV[1]);
                print "DONE!\n";
            }
            when (/REMOTE?/) {
                print "updating remote bazinga structure ... ";
#                update_bazinga($ARGV[1]);
                print "DONE!\n";
            }
            default { print "$ARGV[1] is not a valid identifier. Needs to be LOCAL or REMOTE.\n"; }
        }
    }
    default { print "You entered an unknown parameter, please check.\n"; }
}

my %art_hash;
my $art_txt;
sub add_article {
    my $article_file = shift;
#    my %art_hash;
    open my $ARTFD ,"< $article_file" or die "File could not be opened, please check permissions.\n";
    while (<$ARTFD>) {
        $art_hash{'type'} = $1 and next if m/^type: *\"(article|comment){1}\".*$/;
        $art_hash{$1} = $2 and next if m/^(.+): *\"(.+)\".*$/;
        if (/START_ARTICLE/ .. /END_ARTICLE/) {
            $art_txt .= $_ if $_ !~ /.*(END_ARTICLE|START_ARTICLE){1}.*/ ;
        }
    }
    close $ARTFD;
}

print Dumper(%art_hash);
print Dumper($art_txt);
    
sub delete_article {}
sub replace_article {}
sub check_article {}
sub update_bazinga {}
